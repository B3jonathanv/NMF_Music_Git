#%% md

#### Date: April 09 2022 <br>Programmer: Jonathan Valyou, Christian Dittmar, Yigitcan Özer

#### This notebook can produce all of the NMFD experiments from the 'Read Me' section and proceeds in the following steps:
<br>1. It loads one of the three example audio files:a clarinet recording of the C major scale, a Bach choral on the organ, or a cough over a symphony.
<br>2. It computes the STFT of the audio data.
<br>3. It applies NMFD with the specified parameters in the script (can change these parameters to match the given parameters from the 'Read Me' section.
<br>4. It visualizes the matrix decomposition results.
<br>5. It resynthesizes the separated audio streams and saves them as wav files for output.

#### This code was built based on an existing exmple found in the 'NMF toolbox':
[2] Patricio López-Serrano, Christian Dittmar, Yiğitcan Özer, and Meinard Müller
<br>NMF Toolbox: Music Processing Applications of Nonnegative Matrix Factorization
<br>In Proceedings of the International Conference on Digital Audio Effects (DAFx), 2019.

#%%

import os
import numpy as np
import scipy.io.wavfile as wav
import IPython.display as ipd
import matplotlib.pyplot as plt

from NMFtoolbox.python.NMFtoolbox.forwardSTFT import forwardSTFT
from NMFtoolbox.python.NMFtoolbox.inverseSTFT import inverseSTFT
from NMFtoolbox.python.NMFtoolbox.initTemplates import initTemplates
from NMFtoolbox.python.NMFtoolbox.initActivations import initActivations
from NMFtoolbox.python.NMFtoolbox.NMFD import NMFD
from NMFtoolbox.python.NMFtoolbox.alphaWienerFilter import alphaWienerFilter
from NMFtoolbox.python.NMFtoolbox.visualizeComponentsNMF import visualizeComponentsNMF
from NMFtoolbox.python.NMFtoolbox.utils import make_monaural, pcmInt16ToFloat32Numpy

inpPath = 'NMFtoolbox/data/'
outPath = 'output/'

# create the output directory if it doesn't exist
if not os.path.isdir(outPath):
    os.makedirs(outPath)

# convert wav from int16 to float32
filename = 'eqt-major-sc.wav'
#filename = 'Bach-BWV80-Choral-EQTTuning.wav'
#filename = 'Coughing_Symphony.wav'

#%% md

### 1. Load the audio signal

#%%

fs, x = wav.read(os.path.join(inpPath, filename))

# make monaural if necessary
x = make_monaural(x)

x = pcmInt16ToFloat32Numpy(x)

#%% md

### 2. compute STFT

#%%

# spectral parameters
paramSTFT = dict()
paramSTFT['blockSize'] = 2048
paramSTFT['hopSize'] = 512
paramSTFT['winFunc'] = np.hanning(paramSTFT['blockSize'])
paramSTFT['reconstMirror'] = True
paramSTFT['appendFrame'] = True
paramSTFT['numSamples'] = len(x)

# STFT computation
X, A, P = forwardSTFT(x, paramSTFT)

# get dimensions and time and freq resolutions
numBins, numFrames = X.shape
deltaT = paramSTFT['hopSize'] / fs
deltaF = fs / paramSTFT['blockSize']

#%% md

### 3. Apply NMF variants to STFT magnitude

#%%

# set common parameters
numComp = 8
numIter = 200
numTemplateFrames = 8

# generate initial guess for templates
paramTemplates = dict()
paramTemplates['deltaF'] = deltaF
paramTemplates['numComp'] = numComp
paramTemplates['numBins'] = numBins
paramTemplates['numTemplateFrames'] = numTemplateFrames
initW = initTemplates(paramTemplates, 'random')

# generate initial activations
paramActivations = dict()
paramActivations['numComp'] = numComp
paramActivations['numFrames'] = numFrames

initH = initActivations(paramActivations, 'uniform')

# NMFD parameters
paramNMFD = dict()
paramNMFD['numComp'] = numComp
paramNMFD['numFrames'] = numFrames
paramNMFD['numIter'] = numIter
paramNMFD['numTemplateFrames'] = numTemplateFrames
paramNMFD['initW'] = initW
paramNMFD['initH'] = initH

# NMFD core method
nmfdW, nmfdH, nmfdV, divKL, _ = NMFD(A, paramNMFD)

# alpha-Wiener filtering
nmfdA, _ = alphaWienerFilter(A, nmfdV, 1.0)

#%%

#visualize
paramVis = dict()
paramVis['deltaT'] = deltaT
paramVis['deltaF'] = deltaF
paramVis['endeSec'] = 6
paramVis['fontSize'] = 14
fh1, _ = visualizeComponentsNMF(A, nmfdW, nmfdH, nmfdA, paramVis)
#Problem graphing W for components between 5-10

#%%

audios = []

# resynthesize results of NMF with soft constraints and score information
for k in range(numComp):
    Y = nmfdA[k] * np.exp(1j * P);
    y, _ = inverseSTFT(Y, paramSTFT)

    audios.append(y)
    # save result
    out_filepath = os.path.join(outPath,
                                'CScale_component_{}.wav'.format(k, filename))

    wav.write(filename=out_filepath, rate=fs, data=y)
